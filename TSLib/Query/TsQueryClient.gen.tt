// TSLib - A free TeamSpeak 3 and 5 client library
// Copyright (C) 2017  TSLib contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.
// <auto-generated />

<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ include file="../Generated/M2BParser.ttinclude" once="true" #>
<#@ include file="../Generated/MessageParser.ttinclude" once="true" #>
<#@ include file="../Generated/BookParser.ttinclude" once="true" #>
<#@ include file="../Generated/NotificationUtil.ttinclude" once="true" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using TSLib.Helper;
using TSLib.Messages;

#nullable enable
namespace TSLib.Query
{
	partial class TsQueryClient
	{
		<#
		var genbook = BookDeclarations.Parse(Host.ResolvePath("../Declarations/Book.toml"));
		var genmsg = Messages.Parse(Host.ResolvePath("../Declarations/Messages.toml"));
		var genm2b = M2BDeclarations.Parse(Host.ResolvePath("../Declarations/MessagesToBook.toml"), genmsg, genbook);
		
		GenNtfyDecls(OnlyS2C(genmsg.NotifiesSorted).Where(ntfy => sharedNotifications.Contains(ntfy.name)));
		#>

		private void InvokeEvent(LazyNotification lazyNotification)
		{
			var ntf = lazyNotification.Notifications;
			switch (lazyNotification.NotifyType)
			{
			<#
			foreach(var ntfy in OnlyS2C(genmsg.NotifiesSorted))
			{
				if(!sharedNotifications.Contains(ntfy.name)) continue;
			#>
			case NotificationType.<#= ntfy.name #>: {
				var ntfc = (<#=ntfy.name #>[])ntf;
				On<#= ntfy.name #>?.Invoke(this, ntfc);
				var ev = OnEach<#= ntfy.name #>;
				foreach(var that in ntfc) {
					ev?.Invoke(this, that);
				}
				break;
			}
			<#
			}
			#>
			case NotificationType.CommandError: break;
			case NotificationType.Unknown:
			default:
				throw Tools.UnhandledDefault(lazyNotification.NotifyType);
			}
		}
	}
}