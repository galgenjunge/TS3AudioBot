// TSLib - A free TeamSpeak 3 and 5 client library
// Copyright (C) 2017  TSLib contributors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the Open Software License v. 3.0
//
// You should have received a copy of the Open Software License along with this
// program. If not, see <https://opensource.org/licenses/OSL-3.0>.
// <auto-generated />

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualBasic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualBasic.FileIO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#
string declFilePath = Host.ResolvePath("../Declarations/Versions.csv");
var data = new List<string[]>();
using (TextFieldParser parser = new TextFieldParser(declFilePath))
{
	parser.TextFieldType = FieldType.Delimited;
	parser.SetDelimiters(",");
	while (!parser.EndOfData)
		data.Add(parser.ReadFields());
}
var dict = new Dictionary<string, Ver> {
	{ "Windows", new Ver { plat = "WIN", enu = "Windows" } },
	{ "Linux", new Ver { plat = "LIN", enu = "Linux" } },
	{ "OS X", new Ver { plat = "MAC", enu = "MacOs" } },
	{ "macOS", new Ver { plat = "MAC", enu = "MacOs" } },
	{ "Android", new Ver { plat = "AND", enu = "Android" } },
	{ "iOS", new Ver { plat = "IOS", enu = "Ios" } },
};
var reg = new Regex(@"^(\d(?:\.[\d?]+)+)");
string BuildToFld(string build)
{
	var m = reg.Match(build);
	return string.Join("_", m.Groups[1].Value.Split('.').Select(x => x.Replace("?", "X")));
}
#>

namespace TSLib
{
	partial class TsVersionSigned
	{
		// ReSharper disable InconsistentNaming, UnusedMember.Global<#
		var header = data[0];
		int ichan = Array.IndexOf(header, "channel");
		int iname = Array.IndexOf(header, "version");
		int iplat = Array.IndexOf(header, "platform");
		int ihash = Array.IndexOf(header, "hash");
		var duplicates = new HashSet<string>();

		foreach (var line in data.Skip(1).Reverse()) {
			var ver = dict[line[iplat]];
			var fldName = $"VER_{ver.plat}_{BuildToFld(line[iname])}";
			if (duplicates.Contains(fldName))
				continue;
			duplicates.Add(fldName);
			Regex VersionPattern = new Regex(@"([^ ])* \[Build: (\d+)\]");
			var build = VersionPattern.Match(line[iname]).Groups[2].Value;
		#>
		public static TsVersionSigned <#= fldName #> { get; } = new TsVersionSigned("<#=
			line[iname] #>", "<#=
			line[iplat] #>", ClientPlatform.<#=
			ver.enu #>, <#= 
			build #>UL, "<#=
			line[ihash] #>");<#
		} #>
		// ReSharper restore InconsistentNaming, UnusedMember.Global
	}
}
<#+ class Ver
{
	public string plat;
	public string enu;
}
#>